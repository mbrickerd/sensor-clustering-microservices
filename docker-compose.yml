# =============================================================================
# Sensor Failure Detection System
# Docker Compose Configuration
# =============================================================================
# This docker-compose file is organized in layers of dependency:
# - Infrastructure services (databases, message brokers)
# - Management UIs for monitoring and administration
# - Core application services (producer, consumer, trainer, predictor)
# - Orchestration services (Airflow)

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # Base services that other components depend on
  # =============================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - sensor_network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - sensor_network

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sensor_network

  postgres-airflow:
    image: postgres:15-alpine
    container_name: postgres-airflow
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${AIRFLOW_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_DB}
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AIRFLOW_USER} -d ${AIRFLOW_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sensor_network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - sensor_network

  # =============================================================================
  # MANAGEMENT UIs
  # Web interfaces for monitoring and administration
  # =============================================================================
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - sensor_network

  # Add this for Kafka metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9308:9308"
    command:
      - --kafka.server=kafka:29092
    networks:
      - sensor_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9308"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Add this for Postgres metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    depends_on:
      - postgres
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    networks:
      - sensor_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - sensor_network

  mlflow:
    build:
      context: .
      dockerfile: mlflow/Dockerfile
    container_name: mlflow
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5001:5000"
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./data:/app/data
      - mlflow_data:/mlflow/artifacts
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sensor_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
      - "--storage.tsdb.min-block-duration=2h"
      - "--storage.tsdb.no-lockfile"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    networks:
      - sensor_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    depends_on:
      - prometheus
    networks:
      - sensor_network

  # =============================================================================
  # CORE APPLICATION SERVICES
  # The main microservices of the system
  # =============================================================================
  sensor-producer:
    build:
      context: .
      dockerfile: producer/Dockerfile
    container_name: sensor-producer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      SIMULATION_INTERVAL_MS: 500
      NUM_SENSORS: 20
      SENSOR_DATA_FILE: /app/data/data_sensors.csv
    volumes:
      - ./data:/app/data
    networks:
      - sensor_network
    restart: unless-stopped

  sensor-consumer:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    container_name: sensor-consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID:-sensor-consumer-group}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      BATCH_SIZE: ${BATCH_SIZE:-100}
      COMMIT_INTERVAL_MS: ${COMMIT_INTERVAL_MS:-5000}
    networks:
      - sensor_network
    restart: unless-stopped

  sensor-trainer:
    build:
      context: .
      dockerfile: trainer/Dockerfile
    container_name: sensor-trainer
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      GIT_PYTHON_REFRESH: quiet
      API_MODE: ${API_MODE:-true}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
      TRAINING_LOOKBACK_HOURS: ${TRAINING_LOOKBACK_HOURS:-1}
      SENSOR_DATA_FILE: /app/data/data_sensors.csv
    volumes:
      - ./data:/app/data
      - mlflow_data:/mlflow/artifacts
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sensor_network

  sensor-worker:
    build:
      context: .
      dockerfile: trainer/Dockerfile
    container_name: sensor-worker
    environment:
      GIT_PYTHON_REFRESH: quiet
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow:5000}
      WORKER_MODE: ${WORKER_MODE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    volumes:
      - ./data:/app/data
      - mlflow_data:/mlflow/artifacts
    healthcheck:
      test: ["CMD", "celery", "-A", "trainer.tasks.train", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sensor_network
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_started
      redis:
        condition: service_healthy

  sensor-predictor:
    build:
      context: .
      dockerfile: predictor/Dockerfile
    container_name: sensor-predictor
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_started
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow:5000}
      INFERENCE_INTERVAL_SECONDS: ${INFERENCE_INTERVAL_SECONDS:-30}
      PREDICTION_BATCH_SIZE: ${PREDICTION_BATCH_SIZE:-100}
      METRICS_PORT: ${METRICS_PORT:-8001}
    volumes:
      - ./data:/app/data
    networks:
      - sensor_network
    restart: unless-stopped

  # =============================================================================
  # ORCHESTRATION SERVICES
  # Airflow for workflow orchestration and scheduling
  # =============================================================================
  # Airflow services section:
  airflow-init:
    build:
      context: .
      dockerfile: airflow/Dockerfile
    container_name: airflow-init
    depends_on:
      postgres-airflow:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER}:${AIRFLOW_PASSWORD}@${AIRFLOW_HOST}:5432/${AIRFLOW_DB}
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD:-airflow}
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow:5000}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: airflow db init
    networks:
      - sensor_network

  airflow-webserver:
    build:
      context: .
      dockerfile: airflow/Dockerfile
    container_name: airflow-webserver
    depends_on:
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      sensor-trainer:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER}:${AIRFLOW_PASSWORD}@postgres-airflow:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:-airflowsecretkey}
      AIRFLOW_CONN_TRAINER_API: "http://sensor-trainer:8000"
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow:5000}
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./trainer:/app/trainer
      - ./domain:/app/domain
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sensor_network

  airflow-scheduler:
    build:
      context: .
      dockerfile: airflow/Dockerfile
    container_name: airflow-scheduler
    depends_on:
      postgres-airflow:
        condition: service_healthy
      sensor-trainer:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER}:${AIRFLOW_PASSWORD}@${AIRFLOW_HOST}:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW_CONN_TRAINER_API: "http://sensor-trainer:8000"
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow:5000}
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./data:/app/data
      - ./trainer:/app/trainer
      - ./domain:/app/domain
      - /var/run/docker.sock:/var/run/docker.sock
    command: scheduler
    networks:
      - sensor_network

# =============================================================================
# VOLUMES & NETWORKS
# Persistent storage and networking configuration
# =============================================================================
volumes:
  # Data storage
  postgres_data:
  postgres_airflow_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:

  # UI and tools storage
  pgadmin_data:
  mlflow_data:
  airflow_logs:
  prometheus_data:
  grafana_data:

# Main network for all services
networks:
  sensor_network:
    driver: bridge
